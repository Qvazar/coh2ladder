/*
 * File: app/controller/LadderTabController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Coh2Ladder.controller.LadderTabController', {
    extend: 'Ext.app.Controller',

    requires: [
        'Ext.data.Store'
    ],

    config: {
        gameModeStore: {
            model: 'Coh2Ladder.model.GameMode',
            sorters: 'name'
        },
        factionStore: {
            model: 'Coh2Ladder.model.Faction',
            sorters: 'name'
        },
        playerStore: {
            model: 'Coh2Ladder.model.Player'
        },
        activeGameModeIndex: 0,

        routes: {
            'ladder/:gameMode/:faction': 'showLadderGameModeAndFaction'
        },

        refs: {
            ladderStack: '#ladderStack',
            gameModeButtons: '#gameModeButtons',
            ladderTabView: 'laddertabview'
        },

        control: {
            "laddertabview #gameModeButtons button": {
                tap: 'onGameModeButtonTap'
            },
            "laddercarousel": {
                activeitemchange: 'onFactionChange'
            }
        }
    },

    onGameModeButtonTap: function(button, e, eOpts) {
        var gameModeId = button.config.gameModeId,
            gameModeName = this.getGameModeStore().findRecord('id', gameModeId).get('name'),
            factionId = this.activeGameModeFactions[gameModeId],
            factionName = this.getFactionStore().findRecord('id', factionId).get('name');

        this.redirectTo('ladder/' + gameModeName + '/' + factionName);
    },

    onFactionChange: function(container, value, oldValue, eOpts) {
        var gameModeId = container.getGameModeId(),
            factionId = value.getFactionId(),
            gameModeName = this.getGameModeStore().findRecord('id', gameModeId).get('name'),
            factionName = this.getFactionStore().findRecord('id', factionId).get('name');

        this.activeGameModeFactions[gameModeId] = factionId;

        this.getApplication().getHistory().add({
            url: 'ladder/' + gameModeName + '/' + factionName
        }, /* silent */ true);
    },

    applyFactionStore: function(config) {
        return this.createStore(config);
    },

    applyGameModeStore: function(config) {
        return this.createStore(config);
    },

    applyPlayerStore: function(config) {
        return this.createStore(config);
    },

    launch: function() {

        // Need to load here to correctly load the data, as the first record loaded through associations is wrong..
        //this.getPlayerStore().load();

        var gameModeButtons = this.getGameModeButtons(),
            ladderStack = this.getLadderStack(),
            activeGameModeFactions = {};

        this.activeGameModeFactions = activeGameModeFactions;

        gameModeButtons.removeAll(true);

        this.getGameModeStore().load(function(gameModes) {
            this.getFactionStore().load(function(factions) {

                gameModes.forEach(function(gameMode, gmIndex) {

                    var name = gameMode.get('name'),
                        gameModeId = gameMode.get('id');

                    gameModeButtons.add({
                        xtype: 'button',
                        text: name,
                        gameModeId: gameModeId
                    });

                    ladderStack.add({
                        xtype: 'laddercarousel',
                        gameModeId: gameModeId,
                        cls: [ 'gamemodepage', gameModeId ],
                        items: (function() {

                            var items = [];

                            factions.forEach(function(faction, index) {
                                var factionId = faction.get('id');

                                if (!activeGameModeFactions[gameModeId]) {
                                    activeGameModeFactions[gameModeId] = factionId;
                                }

                                //debugger;
                                items.push({
                                    xtype: 'ladderpage',
                                    factionId: factionId,
                                    gameModeId: gameModeId,
                                    cls: [ 'factionpage', factionId ]
                                });
                            }, this);

                            return items;
                        }())
                    });
                });

                gameModeButtons.setPressedButtons([0]);

            }, this);
        }, this);
    },

    createStore: function(storeConfig) {
        return Ext.create('Ext.data.Store', storeConfig);
    },

    showLadderGameModeAndFaction: function(gameMode, faction) {
        var switchFaction = !!faction,
            gameModeIndex = this.getGameModeStore().find('name', gameMode),
            ladderStack = this.getLadderStack(),
            gameModePage = ladderStack.getItems().getAt(gameModeIndex),
            currentGameModeIndex = ladderStack.getItems().indexOf(ladderStack.getActiveItem()),
            animateDirection = gameModeIndex < currentGameModeIndex ? 'right' : 'left';

        this.getGameModeButtons().setPressedButtons([ gameModeIndex ]);

        if (switchFaction) {
            var factionIndex = this.getFactionStore().find('name', faction);

            gameModePage.setActiveItem(factionIndex);
        }

        ladderStack.animateActiveItem(gameModeIndex, {
            type: 'flip',
            direction: animateDirection
        });


        this.getLadderTabView().show();
    }

});